---
apiVersion: v1
kind: Service
metadata:
  name: mysqldb
spec:
  selector:
    app: mysqldb
  ports:
  - port: 3306
    targetPort: 3306
--- 
apiVersion: v1
kind: Service
metadata:
  name: todoapi
spec:
  selector:
    app: todoapi
  ports:
  - port: 4100
    targetPort: 4100
---
apiVersion: v1
kind: Service
metadata:
  name: webapp
spec:
  selector:
    app: webapp
  ports:
  - port: 4200
    targetPort: 4200   
---    
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysqldb
  labels:
    app: mysqldb
    version: v1  
spec:
  selector:
    matchLabels:
      app: mysqldb
  serviceName: mysqldb-svc
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"    
      labels:
        app: mysqldb
        version: v1  
    spec:
      containers:
      - name: mysqldb
        image: docker.io/mysql:latest
        resources:
          limits:
            memory: "512Mi"
            cpu: "100m"        
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: mytodoapp
        - name: MYSQL_DATABASE
          value: todoapp
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: db-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 500Mi            
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: todo-app-configmap
data:
  todo-api.properties: |
    APP_PORT=4100
    MYSQL_HOST=mysqldb
    MYSQL_PORT=3306
    MYSQL_USER=root
    MYSQL_PASS=mytodoapp
    MYSQL_DB=todoapp
  web-app-config.properties: |
    [todo-api]
    Scheme=http
    Host=todoapi
    Port=4100
    [frontend]
    ParallelThreads=2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todoapi
  labels:
    app: todoapi
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"StatefulSet","name":"mysqldb"}]'    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todoapi
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"    
      labels:
        app: todoapi
        version: v1            
    spec:
      containers:
      - name: todoapi
        image: quay.io/rebontadeb/training/go-todo-crud-api-x86-64:v1
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
        ports:
        - containerPort: 4100
        volumeMounts:
          - mountPath: /app/config/todo-api.properties
            name: todo-api-config
            subPath: todo-api.properties
      volumes:
        - name: todo-api-config
          configMap:
            name: todo-app-configmap
            items:
            - key: todo-api.properties
              path: todo-api.properties
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  labels:
    app: webapp
    version: v1    
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"todoapi"}]'    
spec:
  selector:
    matchLabels:
      app: webapp        
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"    
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: quay.io/rebontadeb/training/flask-app-x86-64:v1
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
        ports:
        - containerPort: 4200
        volumeMounts:
          - mountPath: /config/web-app-config.properties
            name: webapp-config
            subPath: web-app-config.properties
      volumes:
        - name: webapp-config
          configMap:
            name: todo-app-configmap
            items:
            - key: web-app-config.properties
              path: web-app-config.properties
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: todo-webapp
spec:
  to:
    kind: Service
    name: webapp
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  port:
    targetPort: 4200

