apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  annotations:
  labels:
    app: rhel9-mysqldb-vm
    kubevirt.io/dynamic-credentials-support: 'true'
    vm.kubevirt.io/template: rhel9-server-small
    vm.kubevirt.io/template.namespace: openshift
    vm.kubevirt.io/template.revision: '1'
    vm.kubevirt.io/template.version: v0.31.1
  name: rhel9-mysqldb-vm
  namespace: demo-project
spec:
  dataVolumeTemplates:
    - apiVersion: cdi.kubevirt.io/v1beta1
      kind: DataVolume
      metadata:
        name: rhel9-mysqldb-vm
      spec:
        sourceRef:
          kind: DataSource
          name: rhel9
          namespace: openshift-virtualization-os-images
        storage:
          resources:
            requests:
              storage: 30Gi
  running: true
  template:
    metadata:
      annotations:
        vm.kubevirt.io/flavor: small
        vm.kubevirt.io/os: rhel9
        vm.kubevirt.io/workload: server
      labels:
        kubevirt.io/domain: rhel9-mysqldb-vm
        kubevirt.io/size: small
    spec:
      architecture: amd64
      domain:
        cpu:
          cores: 2
          sockets: 1
          threads: 1
        devices:
          disks:
            - disk:
                bus: virtio
              name: rootdisk
            - disk:
                bus: virtio
              name: cloudinitdisk
        machine:
          type: pc-q35-rhel9.4.0
        memory:
          guest: 2Gi
      terminationGracePeriodSeconds: 180
      volumes:
        - dataVolume:
            name: rhel9-mysqldb-vm
          name: rootdisk
        - cloudInitNoCloud:
            userData: |
              #cloud-config
              user: mysql-user
              password: redhat
              chpasswd: { expire: False }
              runcmd:
                - sudo subscription-manager register --org="<your-data-here>" --activationkey="<your-data-here>"
                - sudo dnf update -y
                - sudo sudo dnf install mysql-server -y
                - sudo sudo systemctl start mysqld
                - sudo systemctl enable mysqld
                - sudo firewall-cmd --add-service=mysql --permanent
                - sudo firewall-cmd --reload    
                - sudo mysqladmin -u root password 'mySqlPass1!' 
                - sudo mysql -u root -p'mySqlPass1!' -e "CREATE DATABASE todoapp;"   
          name: cloudinitdisk
---
apiVersion: v1
kind: Service
metadata:
  name: mysqldb
  namespace: demo-project  
spec:
  selector:
    kubevirt.io/domain: rhel9-mysqldb-vm    
  ports:
  - port: 3306
    targetPort: 3306
--- 
apiVersion: v1
kind: Service
metadata:
  name: todoapi
  namespace: demo-project    
spec:
  selector:
    app: todoapi
  ports:
  - port: 4100
    targetPort: 4100
---
apiVersion: v1
kind: Service
metadata:
  name: webapp
  namespace: demo-project    
spec:
  selector:
    app: webapp
  ports:
  - port: 4200
    targetPort: 4200   
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: todo-app-configmap
  namespace: demo-project    
data:
  todo-api.properties: |
    APP_PORT=4100
    MYSQL_HOST=mysqldb
    MYSQL_PORT=3306
    MYSQL_USER=root
    MYSQL_PASS=mySqlPass1!
    MYSQL_DB=todoapp
  web-app-config.properties: |
    [todo-api]
    Scheme=http
    Host=todoapi
    Port=4100
    [frontend]
    ParallelThreads=2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todoapi
  namespace: demo-project    
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"kubevirt.io/v1","kind":"VirtualMachine","name":"rhel9-mysqldb-vm"}]'  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todoapi
  template:
    metadata:
      labels:
        app: todoapi
    spec:
      containers:
      - name: todoapi
        image: quay.io/rebontadeb/training/go-todo-crud-api-x86-64:v1
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
        ports:
        - containerPort: 4100
        volumeMounts:
          - mountPath: /app/config/todo-api.properties
            name: todo-api-config
            subPath: todo-api.properties
      volumes:
        - name: todo-api-config
          configMap:
            name: todo-app-configmap
            items:
            - key: todo-api.properties
              path: todo-api.properties
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  namespace: demo-project    
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"todoapi"}]'  
spec:
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: quay.io/rebontadeb/training/flask-app-x86-64:v1
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
        ports:
        - containerPort: 4200
        volumeMounts:
          - mountPath: /config/web-app-config.properties
            name: webapp-config
            subPath: web-app-config.properties
      volumes:
        - name: webapp-config
          configMap:
            name: todo-app-configmap
            items:
            - key: web-app-config.properties
              path: web-app-config.properties
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: todo-webapp
  namespace: demo-project
spec:
  to:
    kind: Service
    name: webapp
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  port:
    targetPort: 4200



